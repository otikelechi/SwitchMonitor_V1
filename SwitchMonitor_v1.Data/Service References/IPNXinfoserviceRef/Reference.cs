//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SwitchMonitor_v1.Data.IPNXinfoserviceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Node", Namespace="http://schemas.datacontract.org/2004/07/AppZoneSwitch.Core.Implementations")]
    [System.SerializableAttribute()]
    public partial class Node : SwitchMonitor_v1.Data.IPNXinfoserviceRef.EntityWithEnableDisable {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AcquiringInstitutionCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BankCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[] ChildNodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SwitchMonitor_v1.Data.IPNXinfoserviceRef.NodeConnectionType ConnectionTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnableSelectiveReversalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsConnectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsServiceCodeAwareField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int KeyExchangeIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ManagementUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PortField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReconnectIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RequestTimeoutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SwitchMonitor_v1.Data.IPNXinfoserviceRef.NodeType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AcquiringInstitutionCode {
            get {
                return this.AcquiringInstitutionCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.AcquiringInstitutionCodeField, value) != true)) {
                    this.AcquiringInstitutionCodeField = value;
                    this.RaisePropertyChanged("AcquiringInstitutionCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BankCode {
            get {
                return this.BankCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BankCodeField, value) != true)) {
                    this.BankCodeField = value;
                    this.RaisePropertyChanged("BankCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[] ChildNodes {
            get {
                return this.ChildNodesField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildNodesField, value) != true)) {
                    this.ChildNodesField = value;
                    this.RaisePropertyChanged("ChildNodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SwitchMonitor_v1.Data.IPNXinfoserviceRef.NodeConnectionType ConnectionType {
            get {
                return this.ConnectionTypeField;
            }
            set {
                if ((this.ConnectionTypeField.Equals(value) != true)) {
                    this.ConnectionTypeField = value;
                    this.RaisePropertyChanged("ConnectionType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EnableSelectiveReversal {
            get {
                return this.EnableSelectiveReversalField;
            }
            set {
                if ((this.EnableSelectiveReversalField.Equals(value) != true)) {
                    this.EnableSelectiveReversalField = value;
                    this.RaisePropertyChanged("EnableSelectiveReversal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostName {
            get {
                return this.HostNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostNameField, value) != true)) {
                    this.HostNameField = value;
                    this.RaisePropertyChanged("HostName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConnected {
            get {
                return this.IsConnectedField;
            }
            set {
                if ((this.IsConnectedField.Equals(value) != true)) {
                    this.IsConnectedField = value;
                    this.RaisePropertyChanged("IsConnected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsServiceCodeAware {
            get {
                return this.IsServiceCodeAwareField;
            }
            set {
                if ((this.IsServiceCodeAwareField.Equals(value) != true)) {
                    this.IsServiceCodeAwareField = value;
                    this.RaisePropertyChanged("IsServiceCodeAware");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int KeyExchangeInterval {
            get {
                return this.KeyExchangeIntervalField;
            }
            set {
                if ((this.KeyExchangeIntervalField.Equals(value) != true)) {
                    this.KeyExchangeIntervalField = value;
                    this.RaisePropertyChanged("KeyExchangeInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ManagementUrl {
            get {
                return this.ManagementUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ManagementUrlField, value) != true)) {
                    this.ManagementUrlField = value;
                    this.RaisePropertyChanged("ManagementUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Port {
            get {
                return this.PortField;
            }
            set {
                if ((this.PortField.Equals(value) != true)) {
                    this.PortField = value;
                    this.RaisePropertyChanged("Port");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReconnectInterval {
            get {
                return this.ReconnectIntervalField;
            }
            set {
                if ((this.ReconnectIntervalField.Equals(value) != true)) {
                    this.ReconnectIntervalField = value;
                    this.RaisePropertyChanged("ReconnectInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RequestTimeout {
            get {
                return this.RequestTimeoutField;
            }
            set {
                if ((this.RequestTimeoutField.Equals(value) != true)) {
                    this.RequestTimeoutField = value;
                    this.RaisePropertyChanged("RequestTimeout");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SwitchMonitor_v1.Data.IPNXinfoserviceRef.NodeType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Entity", Namespace="http://schemas.datacontract.org/2004/07/AppZoneSwitch.Core.Implementations")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceUptimeSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceUptimeSummaryEntry))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.EntityWithEnableDisable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node))]
    public partial class Entity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceUptimeSummary", Namespace="http://schemas.datacontract.org/2004/07/AppZoneSwitch.Core.Implementations")]
    [System.SerializableAttribute()]
    public partial class ServiceUptimeSummary : SwitchMonitor_v1.Data.IPNXinfoserviceRef.Entity {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceUptimeSummaryEntry", Namespace="http://schemas.datacontract.org/2004/07/AppZoneSwitch.Core.Implementations")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.EntityWithEnableDisable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.Entity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.NodeConnectionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.NodeType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceUptimeSummary))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceUptimeSummaryEntry[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceToMonitor[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceToMonitor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceControllerStatus))]
    public partial class ServiceUptimeSummaryEntry : SwitchMonitor_v1.Data.IPNXinfoserviceRef.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FailedTransactionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstitutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstitutionCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLocalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceCategoryCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SuccessfulTransactionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object TheServiceUptimeSummaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalTransactionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FailedTransactions {
            get {
                return this.FailedTransactionsField;
            }
            set {
                if ((this.FailedTransactionsField.Equals(value) != true)) {
                    this.FailedTransactionsField = value;
                    this.RaisePropertyChanged("FailedTransactions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Institution {
            get {
                return this.InstitutionField;
            }
            set {
                if ((object.ReferenceEquals(this.InstitutionField, value) != true)) {
                    this.InstitutionField = value;
                    this.RaisePropertyChanged("Institution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstitutionCode {
            get {
                return this.InstitutionCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.InstitutionCodeField, value) != true)) {
                    this.InstitutionCodeField = value;
                    this.RaisePropertyChanged("InstitutionCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocal {
            get {
                return this.IsLocalField;
            }
            set {
                if ((this.IsLocalField.Equals(value) != true)) {
                    this.IsLocalField = value;
                    this.RaisePropertyChanged("IsLocal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceCategory {
            get {
                return this.ServiceCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceCategoryField, value) != true)) {
                    this.ServiceCategoryField = value;
                    this.RaisePropertyChanged("ServiceCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceCategoryCode {
            get {
                return this.ServiceCategoryCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceCategoryCodeField, value) != true)) {
                    this.ServiceCategoryCodeField = value;
                    this.RaisePropertyChanged("ServiceCategoryCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SuccessfulTransactions {
            get {
                return this.SuccessfulTransactionsField;
            }
            set {
                if ((this.SuccessfulTransactionsField.Equals(value) != true)) {
                    this.SuccessfulTransactionsField = value;
                    this.RaisePropertyChanged("SuccessfulTransactions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object TheServiceUptimeSummary {
            get {
                return this.TheServiceUptimeSummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.TheServiceUptimeSummaryField, value) != true)) {
                    this.TheServiceUptimeSummaryField = value;
                    this.RaisePropertyChanged("TheServiceUptimeSummary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalTransactions {
            get {
                return this.TotalTransactionsField;
            }
            set {
                if ((this.TotalTransactionsField.Equals(value) != true)) {
                    this.TotalTransactionsField = value;
                    this.RaisePropertyChanged("TotalTransactions");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityWithEnableDisable", Namespace="http://schemas.datacontract.org/2004/07/AppZoneSwitch.Core.Implementations")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node))]
    public partial class EntityWithEnableDisable : SwitchMonitor_v1.Data.IPNXinfoserviceRef.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeConnectionType", Namespace="http://schemas.datacontract.org/2004/07/AppZoneSwitch.Core.Implementations")]
    public enum NodeConnectionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Client = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Server = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NodeType", Namespace="http://schemas.datacontract.org/2004/07/AppZoneSwitch.Core.Implementations")]
    public enum NodeType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Source = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Destination = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SourceAndDestination = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceToMonitor", Namespace="http://schemas.datacontract.org/2004/07/ServiceMonitor.Core")]
    [System.SerializableAttribute()]
    public partial class ServiceToMonitor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServiceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceControllerStatus> StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceName {
            get {
                return this.ServiceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceNameField, value) != true)) {
                    this.ServiceNameField = value;
                    this.RaisePropertyChanged("ServiceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceControllerStatus> Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceControllerStatus", Namespace="http://schemas.datacontract.org/2004/07/System.ServiceProcess")]
    public enum ServiceControllerStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ContinuePending = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Paused = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PausePending = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Running = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartPending = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stopped = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StopPending = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IPNXinfoserviceRef.IInfoService")]
    public interface IInfoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/GetAllNodes", ReplyAction="http://tempuri.org/IInfoService/GetAllNodesResponse")]
        SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[] GetAllNodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/GetAllNodes", ReplyAction="http://tempuri.org/IInfoService/GetAllNodesResponse")]
        System.Threading.Tasks.Task<SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[]> GetAllNodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/GetActiveNodes", ReplyAction="http://tempuri.org/IInfoService/GetActiveNodesResponse")]
        SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[] GetActiveNodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/GetActiveNodes", ReplyAction="http://tempuri.org/IInfoService/GetActiveNodesResponse")]
        System.Threading.Tasks.Task<SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[]> GetActiveNodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/GetConnectedNodes", ReplyAction="http://tempuri.org/IInfoService/GetConnectedNodesResponse")]
        SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[] GetConnectedNodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/GetConnectedNodes", ReplyAction="http://tempuri.org/IInfoService/GetConnectedNodesResponse")]
        System.Threading.Tasks.Task<SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[]> GetConnectedNodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/ReSync", ReplyAction="http://tempuri.org/IInfoService/ReSyncResponse")]
        void ReSync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/ReSync", ReplyAction="http://tempuri.org/IInfoService/ReSyncResponse")]
        System.Threading.Tasks.Task ReSyncAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/GetAllServices", ReplyAction="http://tempuri.org/IInfoService/GetAllServicesResponse")]
        SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceToMonitor[] GetAllServices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/GetAllServices", ReplyAction="http://tempuri.org/IInfoService/GetAllServicesResponse")]
        System.Threading.Tasks.Task<SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceToMonitor[]> GetAllServicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/GetServiceUptimeReport", ReplyAction="http://tempuri.org/IInfoService/GetServiceUptimeReportResponse")]
        SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceUptimeSummary GetServiceUptimeReport(System.DateTime theDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/GetServiceUptimeReport", ReplyAction="http://tempuri.org/IInfoService/GetServiceUptimeReportResponse")]
        System.Threading.Tasks.Task<SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceUptimeSummary> GetServiceUptimeReportAsync(System.DateTime theDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/GetServiceUptimeSummary", ReplyAction="http://tempuri.org/IInfoService/GetServiceUptimeSummaryResponse")]
        SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceUptimeSummaryEntry[] GetServiceUptimeSummary(System.Nullable<System.DateTime> dateFrom, System.Nullable<System.DateTime> dateTo, string theServiceCode, string theInstitutionCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IInfoService/GetServiceUptimeSummary", ReplyAction="http://tempuri.org/IInfoService/GetServiceUptimeSummaryResponse")]
        System.Threading.Tasks.Task<SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceUptimeSummaryEntry[]> GetServiceUptimeSummaryAsync(System.Nullable<System.DateTime> dateFrom, System.Nullable<System.DateTime> dateTo, string theServiceCode, string theInstitutionCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IInfoServiceChannel : SwitchMonitor_v1.Data.IPNXinfoserviceRef.IInfoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InfoServiceClient : System.ServiceModel.ClientBase<SwitchMonitor_v1.Data.IPNXinfoserviceRef.IInfoService>, SwitchMonitor_v1.Data.IPNXinfoserviceRef.IInfoService {
        
        public InfoServiceClient() {
        }
        
        public InfoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public InfoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InfoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public InfoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[] GetAllNodes() {
            return base.Channel.GetAllNodes();
        }
        
        public System.Threading.Tasks.Task<SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[]> GetAllNodesAsync() {
            return base.Channel.GetAllNodesAsync();
        }
        
        public SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[] GetActiveNodes() {
            return base.Channel.GetActiveNodes();
        }
        
        public System.Threading.Tasks.Task<SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[]> GetActiveNodesAsync() {
            return base.Channel.GetActiveNodesAsync();
        }
        
        public SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[] GetConnectedNodes() {
            return base.Channel.GetConnectedNodes();
        }
        
        public System.Threading.Tasks.Task<SwitchMonitor_v1.Data.IPNXinfoserviceRef.Node[]> GetConnectedNodesAsync() {
            return base.Channel.GetConnectedNodesAsync();
        }
        
        public void ReSync() {
            base.Channel.ReSync();
        }
        
        public System.Threading.Tasks.Task ReSyncAsync() {
            return base.Channel.ReSyncAsync();
        }
        
        public SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceToMonitor[] GetAllServices() {
            return base.Channel.GetAllServices();
        }
        
        public System.Threading.Tasks.Task<SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceToMonitor[]> GetAllServicesAsync() {
            return base.Channel.GetAllServicesAsync();
        }
        
        public SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceUptimeSummary GetServiceUptimeReport(System.DateTime theDate) {
            return base.Channel.GetServiceUptimeReport(theDate);
        }
        
        public System.Threading.Tasks.Task<SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceUptimeSummary> GetServiceUptimeReportAsync(System.DateTime theDate) {
            return base.Channel.GetServiceUptimeReportAsync(theDate);
        }
        
        public SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceUptimeSummaryEntry[] GetServiceUptimeSummary(System.Nullable<System.DateTime> dateFrom, System.Nullable<System.DateTime> dateTo, string theServiceCode, string theInstitutionCode) {
            return base.Channel.GetServiceUptimeSummary(dateFrom, dateTo, theServiceCode, theInstitutionCode);
        }
        
        public System.Threading.Tasks.Task<SwitchMonitor_v1.Data.IPNXinfoserviceRef.ServiceUptimeSummaryEntry[]> GetServiceUptimeSummaryAsync(System.Nullable<System.DateTime> dateFrom, System.Nullable<System.DateTime> dateTo, string theServiceCode, string theInstitutionCode) {
            return base.Channel.GetServiceUptimeSummaryAsync(dateFrom, dateTo, theServiceCode, theInstitutionCode);
        }
    }
}
